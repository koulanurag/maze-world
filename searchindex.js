Search.setIndex({"docnames": ["api", "api/environment", "api/utils", "environments", "index", "quick-start"], "filenames": ["api.rst", "api/environment.rst", "api/utils.rst", "environments.rst", "index.rst", "quick-start.ipynb"], "titles": ["API Reference", "Environment", "Utils", "Environment Zoo", "maze-world", "Quick-Start"], "terms": {"environ": [0, 4, 5], "mazeenv": [0, 1, 5], "randommazeenv": [0, 1, 5], "util": [0, 4], "wilsonmazegener": [0, 2], "maze_dijkstra_solv": [0, 2], "class": [1, 2], "maze_world": [1, 2, 5], "env": [1, 2, 5], "sourc": [1, 2], "The": [1, 2], "main": 1, "maze": [1, 2], "implement": 1, "differ": [1, 4], "encapsul": 1, "arbitrari": 1, "behind": 1, "scene": 1, "dynam": [1, 4], "through": 1, "step": [1, 2, 5], "reset": [1, 2, 5], "function": [1, 5], "exampl": [1, 2], "import": [1, 2, 5], "gymnasium": [1, 2, 4, 5], "gym": [1, 2, 4, 5], "def": [1, 5], "generate_maze_fn": [1, 5], "maze_map": [1, 2, 5], "np": [1, 5], "arrai": [1, 2, 5], "1": [1, 5], "0": [1, 2, 5], "agent_loc": [1, 5], "target_loc": [1, 5], "3": 1, "5": [1, 5], "return": [1, 2, 5], "none": [1, 2], "7": [1, 5], "__init__": [1, 2], "render_mod": 1, "maze_width": [1, 5], "maze_height": [1, 5], "paramet": [1, 2], "callabl": 1, "thi": [1, 4, 5], "i": [1, 2, 4], "call": [1, 5], "dure": 1, "everi": [1, 5], "expect": 1, "three": 1, "item": 1, "follow": [1, 2], "order": 1, "map": [1, 4], "numpi": [1, 5], "where": 1, "repres": [1, 2], "wall": 1, "floor": 1, "agent": [1, 2], "locat": 1, "tupl": [1, 2], "x": [1, 2], "y": [1, 2], "target": [1, 2], "option": [1, 2, 5], "str": 1, "specifi": [1, 2, 4], "one": 1, "default": 1, "render": 1, "comput": 1, "human": 1, "continu": 1, "current": 1, "displai": 1, "termin": [1, 2, 5], "usual": 1, "consumpt": 1, "should": 1, "occur": 1, "doesn": 1, "t": 1, "need": 1, "rgb_arrai": 1, "singl": 1, "frame": 1, "state": 1, "A": 1, "ndarrai": 1, "shape": 1, "rgb": 1, "valu": [1, 2], "an": [1, 4], "pixel": 1, "imag": 1, "ansi": 1, "string": 1, "stringio": 1, "contain": 1, "style": 1, "text": 1, "represent": 1, "each": 1, "time": 1, "can": 1, "includ": 1, "newlin": 1, "escap": 1, "sequenc": 1, "e": [1, 4], "g": 1, "color": 1, "rgb_array_list": 1, "ansi_list": 1, "list": [1, 2], "base": [1, 4], "version": 1, "mode": 1, "ar": 1, "possibl": [1, 2], "except": 1, "wrapper": 1, "rendercollect": 1, "automat": 1, "appli": 1, "make": [1, 2, 5], "collect": 1, "pop": 1, "after": 1, "int": [1, 2], "width": [1, 2], "height": [1, 2], "properti": 1, "action_spac": [1, 5], "right": 1, "up": 1, "left": 1, "down": 1, "discret": 1, "action": [1, 2, 5], "space": 1, "object": 1, "type": [1, 2], "avail": 1, "correspond": 1, "index": 1, "close": [1, 2, 5], "method": [1, 2], "shut": 1, "pygam": 1, "wa": 1, "initi": [1, 2], "metadata": 1, "dict": 1, "ani": [1, 4], "render_fp": 1, "4": [1, 5], "observation_spac": 1, "defin": 1, "observ": [1, 2, 5], "2d": 1, "consist": 1, "two": 1, "element": 1, "posit": [1, 2], "In": [1, 5], "empti": 1, "2": 1, "dictionari": 1, "box": 1, "": [1, 2], "wai": 1, "addit": 1, "most": 1, "achiev": 1, "which": 1, "As": 1, "known": 1, "us": [1, 2], "initialis": 1, "By": 1, "convent": 1, "sure": 1, "your": 1, "kei": 1, "support": 1, "chang": [1, 4], "25": 1, "longer": 1, "accept": 1, "rather": 1, "cartpol": 1, "v1": 1, "seed": [1, 2, 5], "its": 1, "gener": [1, 2, 4], "new": 1, "random": [1, 2, 4], "configur": 1, "number": 1, "unus": 1, "info": [1, 2, 5], "inform": 1, "about": 1, "rais": 1, "valueerror": 1, "If": [1, 4], "match": 1, "take": 1, "reward": [1, 2, 5], "float": 1, "receiv": 1, "bool": [1, 2], "whether": [1, 2], "episod": 1, "ha": 1, "truncat": [1, 2, 5], "been": [1, 2], "due": 1, "max": 1, "extend": 1, "creat": [1, 4], "size": [1, 4], "11": 1, "No": 1, "odd": 1, "wilson": [2, 4], "loop": 2, "eras": 2, "walk": 2, "algorithm": 2, "http": [2, 4], "github": [2, 4], "com": [2, 4], "captainfl1nt": 2, "generate_maz": 2, "accord": 2, "work": 2, "grid": 2, "befor": 2, "choos": 2, "first": 2, "cell": 2, "put": 2, "visit": 2, "until": 2, "all": 2, "have": [2, 4], "start": [2, 4], "reach": 2, "end": 2, "path": 2, "add": 2, "cut": 2, "direct": 2, "next": 2, "get_grid": 2, "retriev": 2, "get_solut": 2, "solut": 2, "show_solut": 2, "show": 2, "set": 2, "__str__": 2, "output": 2, "boolean": 2, "indic": 2, "solve_maz": 2, "solv": 2, "impassable_arrai": 2, "motion": 2, "start_idx": 2, "goal_idx": 2, "dijkstra": 2, "array_lik": 2, "impass": 2, "goal": 2, "from": 2, "randommaz": [2, 3, 5], "11x11": [2, 3, 5], "v0": [2, 3, 5], "episode_scor": [2, 5], "optimal_act": 2, "unwrap": 2, "astyp": 2, "_action_to_direct": 2, "break": 2, "print": 2, "success": 2, "els": 2, "failur": 2, "15x15": 3, "21x21": 3, "31x31": 3, "51x51": 3, "101x101": 3, "complex": 4, "reinforc": 4, "learn": 4, "plan": 4, "research": 4, "particular": 4, "investig": 4, "abil": 4, "disclaim": 4, "project": 4, "larg": 4, "amalgam": 4, "mention": 4, "here": 4, "git": 4, "clone": 4, "koulanurag": 4, "cd": 4, "pip": 4, "zoo": 4, "quick": 4, "basic": 4, "usag": 4, "custom": 4, "pre": 4, "api": 4, "mazelab": 4, "out": 4, "you": 4, "question": 4, "suggest": 4, "pleas": 4, "open": 4, "issu": 4, "repositori": 4, "section": 5, "we": 5, "understand": 5, "minim": 5, "suffici": 5, "world": 5, "framework": 5, "begin": 5, "packag": 5, "fals": 5, "while": 5, "sampl": 5, "6": 5, "regist": 5, "id": 5, "7x7": 5, "entry_point": 5, "max_episode_step": 5, "200": 5, "kwarg": 5, "maze_complex": 5, "maze_dens": 5, "8": 5, "9": 5, "_generate_maze_fn": 5, "would": 5, "umaz": 5, "10": 5, "user": 5, "anuragkoul": 5, "virtualenv": 5, "lib": 5, "python3": 5, "site": 5, "registr": 5, "py": 5, "694": 5, "userwarn": 5, "warn": 5, "overrid": 5, "alreadi": 5, "registri": 5, "logger": 5, "f": 5, "34": 5, "new_spec": 5}, "objects": {"maze_world": [[1, 0, 0, "-", "envs"], [2, 0, 0, "-", "utils"]], "maze_world.envs": [[1, 1, 1, "", "MazeEnv"], [1, 1, 1, "", "RandomMazeEnv"]], "maze_world.envs.MazeEnv": [[1, 2, 1, "", "__init__"], [1, 3, 1, "", "action_space"], [1, 2, 1, "", "close"], [1, 4, 1, "", "metadata"], [1, 3, 1, "", "observation_space"], [1, 2, 1, "", "render"], [1, 2, 1, "", "reset"], [1, 2, 1, "", "step"]], "maze_world.envs.RandomMazeEnv": [[1, 2, 1, "", "__init__"]], "maze_world.utils": [[2, 1, 1, "", "WilsonMazeGenerator"], [2, 5, 1, "", "maze_dijkstra_solver"]], "maze_world.utils.WilsonMazeGenerator": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "generate_maze"], [2, 2, 1, "", "get_grid"], [2, 2, 1, "", "get_solution"], [2, 2, 1, "", "show_solution"], [2, 2, 1, "", "solve_maze"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "refer": [0, 4], "environ": [1, 3], "util": 2, "zoo": 3, "maze": [4, 5], "world": 4, "instal": 4, "content": 4, "contact": 4, "quick": 5, "start": 5, "basic": 5, "usag": 5, "creat": 5, "custom": 5, "random": 5, "size": 5, "pre": 5, "specifi": 5, "map": 5}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"API Reference": [[0, "api-reference"]], "Environment": [[1, "module-maze_world.envs"]], "Utils": [[2, "module-maze_world.utils"]], "Environment Zoo": [[3, "environment-zoo"]], "maze-world": [[4, "maze-world"]], "Installation": [[4, "installation"]], "Contents": [[4, "contents"]], "References": [[4, "references"]], "Contact": [[4, "contact"]], "Quick-Start": [[5, "Quick-Start"]], "Basic Usage": [[5, "Basic-Usage"]], "Creating custom random maze size": [[5, "Creating-custom-random-maze-size"]], "Creating maze with pre-specified map": [[5, "Creating-maze-with-pre-specified-map"]]}, "indexentries": {"mazeenv (class in maze_world.envs)": [[1, "maze_world.envs.MazeEnv"]], "randommazeenv (class in maze_world.envs)": [[1, "maze_world.envs.RandomMazeEnv"]], "__init__() (maze_world.envs.mazeenv method)": [[1, "maze_world.envs.MazeEnv.__init__"]], "__init__() (maze_world.envs.randommazeenv method)": [[1, "maze_world.envs.RandomMazeEnv.__init__"]], "action_space (maze_world.envs.mazeenv property)": [[1, "maze_world.envs.MazeEnv.action_space"]], "close() (maze_world.envs.mazeenv method)": [[1, "maze_world.envs.MazeEnv.close"]], "maze_world.envs": [[1, "module-maze_world.envs"]], "metadata (maze_world.envs.mazeenv attribute)": [[1, "maze_world.envs.MazeEnv.metadata"]], "module": [[1, "module-maze_world.envs"], [2, "module-maze_world.utils"]], "observation_space (maze_world.envs.mazeenv property)": [[1, "maze_world.envs.MazeEnv.observation_space"]], "render() (maze_world.envs.mazeenv method)": [[1, "maze_world.envs.MazeEnv.render"]], "reset() (maze_world.envs.mazeenv method)": [[1, "maze_world.envs.MazeEnv.reset"]], "step() (maze_world.envs.mazeenv method)": [[1, "maze_world.envs.MazeEnv.step"]], "wilsonmazegenerator (class in maze_world.utils)": [[2, "maze_world.utils.WilsonMazeGenerator"]], "__init__() (maze_world.utils.wilsonmazegenerator method)": [[2, "maze_world.utils.WilsonMazeGenerator.__init__"]], "generate_maze() (maze_world.utils.wilsonmazegenerator method)": [[2, "maze_world.utils.WilsonMazeGenerator.generate_maze"]], "get_grid() (maze_world.utils.wilsonmazegenerator method)": [[2, "maze_world.utils.WilsonMazeGenerator.get_grid"]], "get_solution() (maze_world.utils.wilsonmazegenerator method)": [[2, "maze_world.utils.WilsonMazeGenerator.get_solution"]], "maze_dijkstra_solver() (in module maze_world.utils)": [[2, "maze_world.utils.maze_dijkstra_solver"]], "maze_world.utils": [[2, "module-maze_world.utils"]], "show_solution() (maze_world.utils.wilsonmazegenerator method)": [[2, "maze_world.utils.WilsonMazeGenerator.show_solution"]], "solve_maze() (maze_world.utils.wilsonmazegenerator method)": [[2, "maze_world.utils.WilsonMazeGenerator.solve_maze"]]}})